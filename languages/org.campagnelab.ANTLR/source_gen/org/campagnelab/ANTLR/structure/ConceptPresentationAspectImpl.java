package org.campagnelab.ANTLR.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Alternative;
  private ConceptPresentation props_Alternatives;
  private ConceptPresentation props_BlockSet;
  private ConceptPresentation props_Dot;
  private ConceptPresentation props_Grammar;
  private ConceptPresentation props_HasOptionalParams;
  private ConceptPresentation props_LabeledElement;
  private ConceptPresentation props_LexerAlt;
  private ConceptPresentation props_LexerAltList;
  private ConceptPresentation props_LexerBlock;
  private ConceptPresentation props_LexerElement;
  private ConceptPresentation props_LexerRule;
  private ConceptPresentation props_LexerRuleBlock;
  private ConceptPresentation props_LexerRuleRef;
  private ConceptPresentation props_LexerRuleRefByName;
  private ConceptPresentation props_LexerToken;
  private ConceptPresentation props_NotSet;
  private ConceptPresentation props_Parentheses;
  private ConceptPresentation props_ParserRule;
  private ConceptPresentation props_ParserRuleBlock;
  private ConceptPresentation props_ParserRuleRef;
  private ConceptPresentation props_REGEXP;
  private ConceptPresentation props_Range;
  private ConceptPresentation props_Rule;
  private ConceptPresentation props_RuleRefByName;
  private ConceptPresentation props_Sequence;
  private ConceptPresentation props_SetElement;
  private ConceptPresentation props_StringLiteral;
  private ConceptPresentation props_ToTextOutput;
  private ConceptPresentation props_Token;
  private ConceptPresentation props_TokenRef;
  private ConceptPresentation props_TokenSpec;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Alternative:
        if (props_Alternative == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Alternative = cpb.create();
        }
        return props_Alternative;
      case LanguageConceptSwitch.Alternatives:
        if (props_Alternatives == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Alternatives");
          props_Alternatives = cpb.create();
        }
        return props_Alternatives;
      case LanguageConceptSwitch.BlockSet:
        if (props_BlockSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BlockSet = cpb.create();
        }
        return props_BlockSet;
      case LanguageConceptSwitch.Dot:
        if (props_Dot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(".");
          props_Dot = cpb.create();
        }
        return props_Dot;
      case LanguageConceptSwitch.Grammar:
        if (props_Grammar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Grammar = cpb.create();
        }
        return props_Grammar;
      case LanguageConceptSwitch.HasOptionalParams:
        if (props_HasOptionalParams == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("HasOptionalParams");
          props_HasOptionalParams = cpb.create();
        }
        return props_HasOptionalParams;
      case LanguageConceptSwitch.LabeledElement:
        if (props_LabeledElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LabeledElement = cpb.create();
        }
        return props_LabeledElement;
      case LanguageConceptSwitch.LexerAlt:
        if (props_LexerAlt == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LexerAlt");
          props_LexerAlt = cpb.create();
        }
        return props_LexerAlt;
      case LanguageConceptSwitch.LexerAltList:
        if (props_LexerAltList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LexerAltList");
          props_LexerAltList = cpb.create();
        }
        return props_LexerAltList;
      case LanguageConceptSwitch.LexerBlock:
        if (props_LexerBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LexerBlock");
          props_LexerBlock = cpb.create();
        }
        return props_LexerBlock;
      case LanguageConceptSwitch.LexerElement:
        if (props_LexerElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LexerElement");
          props_LexerElement = cpb.create();
        }
        return props_LexerElement;
      case LanguageConceptSwitch.LexerRule:
        if (props_LexerRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LexerRule = cpb.create();
        }
        return props_LexerRule;
      case LanguageConceptSwitch.LexerRuleBlock:
        if (props_LexerRuleBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LexerRuleBlock");
          props_LexerRuleBlock = cpb.create();
        }
        return props_LexerRuleBlock;
      case LanguageConceptSwitch.LexerRuleRef:
        if (props_LexerRuleRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a890ef9eL, 0x175f2668a890ef9fL, "rule", "", "");
          props_LexerRuleRef = cpb.create();
        }
        return props_LexerRuleRef;
      case LanguageConceptSwitch.LexerRuleRefByName:
        if (props_LexerRuleRefByName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LexerRuleRefByName");
          props_LexerRuleRefByName = cpb.create();
        }
        return props_LexerRuleRefByName;
      case LanguageConceptSwitch.LexerToken:
        if (props_LexerToken == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LexerToken = cpb.create();
        }
        return props_LexerToken;
      case LanguageConceptSwitch.NotSet:
        if (props_NotSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NotSet");
          props_NotSet = cpb.create();
        }
        return props_NotSet;
      case LanguageConceptSwitch.Parentheses:
        if (props_Parentheses == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(");
          props_Parentheses = cpb.create();
        }
        return props_Parentheses;
      case LanguageConceptSwitch.ParserRule:
        if (props_ParserRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ParserRule = cpb.create();
        }
        return props_ParserRule;
      case LanguageConceptSwitch.ParserRuleBlock:
        if (props_ParserRuleBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L);
          cpb.deprecateProperty(0x631eebe3113c4245L, "isOptional_old");
          cpb.deprecateProperty(0x631eebe3113c4247L, "acceptMultiple_old");
          cpb.deprecateProperty(0x72827882b897b9d5L, "plus_old");
          props_ParserRuleBlock = cpb.create();
        }
        return props_ParserRuleBlock;
      case LanguageConceptSwitch.ParserRuleRef:
        if (props_ParserRuleRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ParserRuleRef = cpb.create();
        }
        return props_ParserRuleRef;
      case LanguageConceptSwitch.REGEXP:
        if (props_REGEXP == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_REGEXP = cpb.create();
        }
        return props_REGEXP;
      case LanguageConceptSwitch.Range:
        if (props_Range == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Range = cpb.create();
        }
        return props_Range;
      case LanguageConceptSwitch.Rule:
        if (props_Rule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Rule = cpb.create();
        }
        return props_Rule;
      case LanguageConceptSwitch.RuleRefByName:
        if (props_RuleRefByName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RuleRefByName");
          props_RuleRefByName = cpb.create();
        }
        return props_RuleRefByName;
      case LanguageConceptSwitch.Sequence:
        if (props_Sequence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Sequence");
          props_Sequence = cpb.create();
        }
        return props_Sequence;
      case LanguageConceptSwitch.SetElement:
        if (props_SetElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SetElement = cpb.create();
        }
        return props_SetElement;
      case LanguageConceptSwitch.StringLiteral:
        if (props_StringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StringLiteral = cpb.create();
        }
        return props_StringLiteral;
      case LanguageConceptSwitch.ToTextOutput:
        if (props_ToTextOutput == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ToTextOutput = cpb.create();
        }
        return props_ToTextOutput;
      case LanguageConceptSwitch.Token:
        if (props_Token == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Token = cpb.create();
        }
        return props_Token;
      case LanguageConceptSwitch.TokenRef:
        if (props_TokenRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e172f3f03L, 0x7c18b9e172f3f04L, "token", "", "");
          props_TokenRef = cpb.create();
        }
        return props_TokenRef;
      case LanguageConceptSwitch.TokenSpec:
        if (props_TokenSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Specification for TOKENS");
          cpb.rawPresentation("tokens");
          props_TokenSpec = cpb.create();
        }
        return props_TokenSpec;
    }
    return null;
  }
}
